pipeline {    
    options { skipDefaultCheckout() }
     agent {label 'master'} 
     tools {
     maven 'mvn'
     }
      environment {
        NEXUS_VERSION = "nexus3"
        NEXUS_PROTOCOL = "http"
        NEXUS_URL = "192.168.43.230:8081"
        NEXUS_REPOSITORY = "DEVOPS"
        NEXUS_CREDENTIAL_ID = "nexusJenkins"
        registry = "ahmed991/backend"
        registryCredential = 'dockerhub'
        
    }
      
    stages { 
     stage('SCM') {
            steps {
               
                git  branch: 'main', url: 'https://github.com/AhmedRomdhani16/PROJECT-CI.git'
                 
            }
        }
     
            
     stage('build'){
            steps {
            sh "mvn --version"
            sh" mvn clean install"
            
            }
            }
        
        
        stage(' SonarQube analysis') {
            steps {
            script {
                    scannerHome = tool 'sonar';
                }
   
                withSonarQubeEnv(installationName:'sonar') {
                  
                        
                        sh ' mvn  sonar:sonar -Dsonar.projectKey=CIPROJECT '
                    
                }
            }
        }
        stage("Publish to Nexus Repository Manager") {
          
         steps {
                script {
                    pom = readMavenPom file: "pom.xml";
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    artifactPath = filesByGlob[0].path;
                    artifactExists = fileExists artifactPath;
                    if(artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";
                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: 'http',
                            nexusUrl: '192.168.43.230:8081',
                            groupId: pom.groupId,
                            version: pom.version,
                            repository: NEXUS_REPOSITORY,
                            credentialsId:  NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"]
                            ]
                        );
                    } else {
                        error "*** File: ${artifactPath}, could not be found";
                    }

 }               
}

}
  stage('BUILD Image Frontend') {
           steps{
           script{
                    sh ' docker build -t ahmed991/backend:${tag} .'
                }
                }
        }
        
         stage('Push image to Hub'){
            steps{
                script{
                   withCredentials([string(credentialsId: 'dockerhubpwd', variable: 'dockerpwd')]) {
                   sh 'docker login -u ahmed991 -p ${dockerpwd}'

}
                   sh 'docker push ahmed991/backend:${tag}'
                }
            }
        }
        
        
        
    
        
        
}
            
}

